"use strict";(self.webpackChunkselectdb_portal=self.webpackChunkselectdb_portal||[]).push([[44806],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=c(n),m=o,h=s["".concat(p,".").concat(m)]||s[m]||u[m]||a;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[s]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},98271:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={title:"Dev & Debug prepare on Mac",language:"en"},i=void 0,l={unversionedId:"developer-guide/mac-dev/dev-prepare",id:"developer-guide/mac-dev/dev-prepare",title:"Dev & Debug prepare on Mac",description:"\x3c!--",source:"@site/community/developer-guide/mac-dev/dev-prepare.md",sourceDirName:"developer-guide/mac-dev",slug:"/developer-guide/mac-dev/dev-prepare",permalink:"/community/developer-guide/mac-dev/dev-prepare",draft:!1,tags:[],version:"current",frontMatter:{title:"Dev & Debug prepare on Mac",language:"en"},sidebar:"community",previous:{title:"Development and Debugging of Apache Doris BE -- Clion",permalink:"/community/developer-guide/be-clion-dev"},next:{title:"Setting Up Dev Env on Mac for Doris BE - CLion",permalink:"/community/developer-guide/mac-dev/be-clion-dev"}},p={},c=[{value:"Install environment dependency",id:"install-environment-dependency",level:2},{value:"Install thrift",id:"install-thrift",level:2},{value:"pull your own code",id:"pull-your-own-code",level:2},{value:"Download Doris compilation dependencies",id:"download-doris-compilation-dependencies",level:2},{value:"Set <code>file descriptors</code>",id:"set-file-descriptors",level:2},{value:"compile Doris",id:"compile-doris",level:2},{value:"Configure Debug environment",id:"configure-debug-environment",level:2},{value:"Start Debugging with IDE",id:"start-debugging-with-ide",level:2}],d={toc:c},s="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(s,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"install-environment-dependency"},"Install environment dependency"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'```\nbrew install automake autoconf libtool pkg-config texinfo coreutils gnu-getopt \\\npython@3 cmake ninja ccache bison byacc gettext wget pcre maven llvm@16 openjdk@8 npm\n```\n\n**Dependency description:**\n    1. Java, Maven, etc. can be downloaded separately for easy management\n        - Mac recommend [Zulu JDK8](https://www.azul.com/downloads/?version=java-8-lts&os=macos&package=jdk#zulu)\n        - Maven Download from [Maven website](https://maven.apache.org/download.cgi) is ok\n        - Self-downloaded Java and Maven need to configure environment variables\n    2. Other dependent environment variables (example for Apple Silicon Macs)\n        - llvm: `export PATH="/opt/homebrew/opt/llvm/bin:$PATH"`\n        - bison: `export PATH = "/opt/homebrew/opt/bison/bin:$PATH`\n        - texinfo: `export PATH = "/opt/homebrew/opt/texinfo/bin:$PATH`\n        - python: `ln -s -f /opt/homebrew/bin/python3 /opt/homebrew/bin/python`\n')),(0,o.kt)("h2",{id:"install-thrift"},"Install thrift"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"**Note\uff1a** Thrift needs to be installed only when debugging FE only. When debugging BE and FE at the same time, the three-party library of BE contains thrift\n\n```\nMacOS: \n   1. Download\uff1a`brew install thrift@0.16.0`\n   2. Create a soft link\uff1a \n      `mkdir -p ./thirdparty/installed/bin`\n      # Apple Silicon \u82af\u7247 macOS\n      `ln -s /opt/homebrew/Cellar/thrift@0.16.0/0.16.0/bin/thrift ./thirdparty/installed/bin/thrift`\n      # Intel \u82af\u7247 macOS\n      `ln -s /usr/local/Cellar/thrift@0.16.0/0.16.0/bin/thrift ./thirdparty/installed/bin/thrift`\n\nNote\uff1amacOS implement `brew install thrift@0.16.0` it may report an error that the version cannot be found. The solution is as follows, execute in the terminal:\n   1. `brew tap-new $USER/local-tap`\n   2. `brew extract --version='0.16.0' thrift $USER/local-tap`\n   3. `brew install thrift@0.16.0`\nreference link: `https://gist.github.com/tonydeng/02e571f273d6cce4230dc8d5f394493c`\n```\n")),(0,o.kt)("h2",{id:"pull-your-own-code"},"pull your own code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"1. pull code\n\n    ``` \n    cd ~\n    mkdir DorisDev\n    cd DorisDev\n    git clone https://github.com/GitHubID/doris.git\n    ```\n\n2. set environment variables\n\n    ```\n    export DORIS_HOME=~/DorisDev/doris\n    export PATH=$DORIS_HOME/bin:$PATH\n    ```\n")),(0,o.kt)("h2",{id:"download-doris-compilation-dependencies"},"Download Doris compilation dependencies"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/apache/doris-thirdparty/releases/tag/automation"},"Apache Doris Third Party Prebuilt")," page contains the source code of all third-party libraries. You can download ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/apache/doris-thirdparty/releases/download/automation/doris-thirdparty-source.tgz"},"doris-thirdparty-source.tgz")," to obtain them.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"You can download the ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("strong",{parentName:"em"},"precompiled"))," third party library from the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/apache/doris-thirdparty/releases/tag/automation"},"Apache Doris Third Party Prebuilt")," page. You may refer to the following commands:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cd thirdparty\nrm -rf installed\n\n# Intel chips\ncurl -L https://github.com/apache/doris-thirdparty/releases/download/automation/doris-thirdparty-prebuilt-darwin-x86_64.tar.xz \\\n    -o - | tar -Jxf -\n\n# Apple Silicon chips\ncurl -L https://github.com/apache/doris-thirdparty/releases/download/automation/doris-thirdparty-prebuilt-darwin-arm64.tar.xz \\\n    -o - | tar -Jxf -\n\n# Make sure that protoc and thrift can run successfully.\ncd installed/bin\n\n./protoc --version\n./thrift --version\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"When running ",(0,o.kt)("inlineCode",{parentName:"p"},"protoc")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"thrift"),", you may meet an error which says ",(0,o.kt)("strong",{parentName:"p"},"the app can not be opened because the developer cannot be verified"),". Go to ",(0,o.kt)("inlineCode",{parentName:"p"},"Security & Privacy"),". Click the ",(0,o.kt)("inlineCode",{parentName:"p"},"Open Anyway")," button in the ",(0,o.kt)("inlineCode",{parentName:"p"},"General")," pane to confirm your intent to open the app. See ",(0,o.kt)("a",{parentName:"p",href:"https://support.apple.com/en-us/HT202491"},"https://support.apple.com/en-us/HT202491"),"."))),(0,o.kt)("h2",{id:"set-file-descriptors"},"Set ",(0,o.kt)("inlineCode",{parentName:"h2"},"file descriptors")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"```\n# bash\necho 'ulimit -n 65536' >>~/.bashrc\n\n# zsh\necho 'ulimit -n 65536' >>~/.zshrc\n```\n")),(0,o.kt)("h2",{id:"compile-doris"},"compile Doris"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"```\ncd $DORIS_HOME\nsh build.sh\n```\n")),(0,o.kt)("h2",{id:"configure-debug-environment"},"Configure Debug environment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"```\n# cp out the compiled package\n\ncp -r output ../doris-run\n\n# Configure FE/BE's conf\n1\u3001IP\u3001directory\n2\u3001BE additional configuration min_file_descriptor_number = 10000\n```\n")),(0,o.kt)("h2",{id:"start-debugging-with-ide"},"Start Debugging with IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[CLion Debug BE On Mac](/community/developer-guide/mac-dev/be-clion-dev)\n\n[IntelliJ IDEA Debug FE On Mac](/community/developer-guide/mac-dev/fe-idea-dev)\n")))}u.isMDXComponent=!0}}]);