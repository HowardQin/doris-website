"use strict";(self.webpackChunkselectdb_portal=self.webpackChunkselectdb_portal||[]).push([[93900],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),d=a,m=p["".concat(c,".").concat(d)]||p[d]||f[d]||o;return t?r.createElement(m,i(i({ref:n},u),{},{components:t})):r.createElement(m,i({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},71829:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(87462),a=(t(67294),t(3905));const o={title:"char",language:"en"},i=void 0,l={unversionedId:"sql-manual/sql-functions/string-functions/char",id:"version-1.2/sql-manual/sql-functions/string-functions/char",title:"char",description:"\x3c!--",source:"@site/versioned_docs/version-1.2/sql-manual/sql-functions/string-functions/char.md",sourceDirName:"sql-manual/sql-functions/string-functions",slug:"/sql-manual/sql-functions/string-functions/char",permalink:"/docs/1.2/sql-manual/sql-functions/string-functions/char",draft:!1,tags:[],version:"1.2",frontMatter:{title:"char",language:"en"},sidebar:"docs",previous:{title:"reverse",permalink:"/docs/1.2/sql-manual/sql-functions/string-functions/reverse"},next:{title:"concat",permalink:"/docs/1.2/sql-manual/sql-functions/string-functions/concat"}},c={},s=[{value:"function char",id:"function-char",level:2},{value:"description",id:"description",level:3},{value:"Syntax",id:"syntax",level:4},{value:"example",id:"example",level:3},{value:"keywords",id:"keywords",level:3}],u={toc:s},p="wrapper";function f(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("version",{since:"1.2"},(0,a.kt)("h2",{id:"function-char"},"function char"),(0,a.kt)("h3",{id:"description"},"description"),(0,a.kt)("h4",{id:"syntax"},"Syntax"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"VARCHAR char(INT,..., [USING charset_name])")),(0,a.kt)("p",null,"Interprets each argument as an integer and returns a string consisting of the characters given by the code values of those integers. ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL")," values are skipped."),(0,a.kt)("p",null,"If the result string is illegal for the given character set, the result from ",(0,a.kt)("inlineCode",{parentName:"p"},"CHAR()")," becomes ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL"),"."),(0,a.kt)("p",null,"Arguments larger than ",(0,a.kt)("inlineCode",{parentName:"p"},"255")," are converted into multiple result bytes. For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"char(15049882)")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"char(229, 164, 154)"),"."),(0,a.kt)("p",null,"Currently only ",(0,a.kt)("inlineCode",{parentName:"p"},"utf8")," is supported for ",(0,a.kt)("inlineCode",{parentName:"p"},"charset_name"),".")),(0,a.kt)("h3",{id:"example"},"example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mysql> select char(68, 111, 114, 105, 115);\n+--------------------------------------+\n| char('utf8', 68, 111, 114, 105, 115) |\n+--------------------------------------+\n| Doris                                |\n+--------------------------------------+\n\nmysql> select char(15049882, 15179199, 14989469);\n+--------------------------------------------+\n| char('utf8', 15049882, 15179199, 14989469) |\n+--------------------------------------------+\n| \u591a\u777f\u4e1d                                     |\n+--------------------------------------------+\n\nmysql> select char(255);\n+-------------------+\n| char('utf8', 255) |\n+-------------------+\n| NULL              |\n+-------------------+\n")),(0,a.kt)("h3",{id:"keywords"},"keywords"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CHAR\n")))}f.isMDXComponent=!0}}]);